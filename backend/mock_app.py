#!/usr/bin/env python3

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional, Union, Dict
import json

# Simple session storage for mock
session_store = {}

# Initialize FastAPI app
app = FastAPI(title="Course Materials RAG System (Mock)")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# Pydantic models
class QueryRequest(BaseModel):
    query: str
    session_id: Optional[str] = None

class QueryResponse(BaseModel):
    answer: str
    sources: List[Union[str, Dict[str, Optional[str]]]]
    session_id: str

class CourseStats(BaseModel):
    total_courses: int
    course_titles: List[str]

class SessionCleanupRequest(BaseModel):
    session_id: str

class SessionCleanupResponse(BaseModel):
    success: bool
    message: str

# Mock data
mock_sources_with_links = [
    {
        "text": "Introduction to Python - Lesson 1", 
        "link": "https://www.youtube.com/watch?v=example1"
    },
    {
        "text": "Python Fundamentals - Lesson 2", 
        "link": "https://www.youtube.com/watch?v=example2"
    },
    {
        "text": "Advanced Python - Lesson 5", 
        "link": None  # This lesson has no link
    }
]

# API Endpoints
@app.post("/api/query", response_model=QueryResponse)
async def query_documents(request: QueryRequest):
    """Mock query endpoint that returns sample data with clickable links"""
    
    # Mock response based on query
    if "python" in request.query.lower():
        answer = """Here's what I found about Python:

Python is a high-level programming language known for its simplicity and readability. Key features include:

- **Easy to learn**: Python's syntax is clear and intuitive
- **Versatile**: Used for web development, data science, AI, and more
- **Large community**: Extensive library ecosystem and community support
- **Cross-platform**: Runs on Windows, macOS, and Linux

Python is great for beginners and experienced developers alike."""
        
        sources = mock_sources_with_links
    else:
        answer = f"""I found some information related to your query: "{request.query}"

This is a mock response to test the clickable links functionality. In the real application, this would be generated by the AI system using the course materials.

The sources below should now be clickable links that open lesson videos in new tabs."""
        
        sources = [
            {
                "text": "Course Materials Overview - Lesson 1",
                "link": "https://www.youtube.com/watch?v=mock1"
            },
            {
                "text": "Getting Started Guide - Lesson 3",
                "link": "https://www.youtube.com/watch?v=mock2"
            }
        ]
    
    session_id = request.session_id or "mock-session-123"
    
    # Store some mock history for the session
    if session_id not in session_store:
        session_store[session_id] = []
    session_store[session_id].append({"query": request.query, "answer": answer})
    
    return QueryResponse(
        answer=answer,
        sources=sources,
        session_id=session_id
    )

@app.post("/api/session/cleanup", response_model=SessionCleanupResponse)
async def cleanup_session(request: SessionCleanupRequest):
    """Clean up a session and its associated data"""
    try:
        session_id = request.session_id
        
        # Remove session from storage
        if session_id in session_store:
            del session_store[session_id]
            return SessionCleanupResponse(
                success=True,
                message=f"Session {session_id} cleaned up successfully"
            )
        else:
            return SessionCleanupResponse(
                success=True,
                message=f"Session {session_id} was not found (may have already been cleaned up)"
            )
            
    except Exception as e:
        return SessionCleanupResponse(
            success=False,
            message=f"Error cleaning up session: {str(e)}"
        )

@app.get("/api/courses", response_model=CourseStats)
async def get_course_stats():
    """Mock course statistics endpoint"""
    return CourseStats(
        total_courses=4,
        course_titles=[
            "Introduction to Python",
            "Python Fundamentals", 
            "Advanced Python Concepts",
            "Python for Data Science"
        ]
    )

# Serve static files for the frontend
app.mount("/", StaticFiles(directory="../frontend", html=True), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)